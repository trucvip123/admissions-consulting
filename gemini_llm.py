import google.generativeai as genai
from config import Config
import logging

logger = logging.getLogger(__name__)


class GeminiLLM:
    def __init__(self, api_key=None):
        self.api_key = api_key or getattr(Config, "GEMINI_API_KEY", None)
        if not self.api_key:
            raise ValueError("Ch∆∞a c·∫•u h√¨nh GEMINI_API_KEY!")
        genai.configure(api_key=self.api_key)
        try:
            self.model = genai.GenerativeModel(Config.LLM_MODEL)
        except:
            raise Exception("Kh√¥ng th·ªÉ kh·ªüi t·∫°o Gemini model. Vui l√≤ng ki·ªÉm tra API key v√† k·∫øt n·ªëi m·∫°ng.")

    def generate(self, prompt: str) -> str:
        try:
            logger.info("üß† ƒêang g·ªçi Gemini API...")
            response = self.model.generate_content(prompt)
            result_text = response.text if hasattr(response, 'text') else str(response)
            logger.info(f"‚úÖ Gemini tr·∫£ v·ªÅ: {result_text[:100]}...")
            return result_text
        except Exception as e:
            error_msg = str(e)
            if "429" in error_msg or "quota" in error_msg.lower():
                logger.error("‚ùå L·ªói quota Gemini API")
                raise Exception("ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n quota Gemini API. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c n√¢ng c·∫•p t√†i kho·∫£n.")
            else:
                logger.error(f"‚ùå L·ªói Gemini API: {error_msg}")
                raise e
